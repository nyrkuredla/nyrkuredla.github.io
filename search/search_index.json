{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\ud83d\udc4b Hi, I\u2019m Ryan. I'm a tech writer, knowledge manager, and general documentation magpie by trade, as well as hiker, forager, baker, sci-fi and fashion nerd, and much else. This portfolio is a living, breathing documentation sandbox where I explore tools, workflows, writing, and whatever otherwise lights me up.</p> <p>\ud83d\udea7 This site is currently, and forever will be, under construction, so expect frequent updates and lots of sparks. </p>"},{"location":"#some-of-what-youll-find-here","title":"Some of what you'll find here:","text":"<ul> <li>A bit about me - Going a bit beyond the resume; less what I've done, more how I like to work, and even some why.</li> <li>Blog - Publishing weekly or thereabouts.</li> <li>Experiments &amp; explorations \u2014 Poking at things and seeing what sticks, then writing about it. For example, I wrote about how to create JavaScript bookmarklets to capture LLM output.</li> <li>You can also look at the tag list to find content organized by topic.</li> </ul> <p>\ud83d\udcac Questions? Curiosity? Find me on LinkedIn or e-mail me to say hi.</p>"},{"location":"topics/","title":"Topics","text":"<p>I'm a big believer in the power of tags to organize content. Use the following tags to find content by topic:</p>"},{"location":"topics/#all-tags-alphabetically","title":"All Tags, Alphabetically","text":""},{"location":"topics/#tag:ai","title":"AI","text":"<ul> <li>            Things I Read This Week #1: KM Failures, AI-roboros, and the Worst Neologism Ever          </li> </ul>"},{"location":"topics/#tag:km","title":"KM","text":"<ul> <li>            Things I Read This Week #1: KM Failures, AI-roboros, and the Worst Neologism Ever          </li> </ul>"},{"location":"topics/#tag:about-me","title":"about-me","text":"<ul> <li>            Working with me          </li> </ul>"},{"location":"topics/#tag:ai","title":"ai","text":"<ul> <li>            In Defense of Handwriting          </li> <li>            \ud83d\udcc2 ChatGPT and Claude Chat Capture Bookmarklets          </li> </ul>"},{"location":"topics/#tag:api","title":"api","text":"<ul> <li>            APIs 101, pt 2: How to talk to an API: requests, responses, and examples          </li> <li>            APIs 101: What is an API, and where would we be without them?          </li> </ul>"},{"location":"topics/#tag:bash","title":"bash","text":"<ul> <li>            Project Overview: Portfolio Site          </li> </ul>"},{"location":"topics/#tag:changelog","title":"changelog","text":"<ul> <li>            Changelog          </li> </ul>"},{"location":"topics/#tag:chatgpt","title":"chatgpt","text":"<ul> <li>            Project Overview: Portfolio Site          </li> <li>            \ud83d\udcc2 ChatGPT and Claude Chat Capture Bookmarklets          </li> </ul>"},{"location":"topics/#tag:cicd","title":"cicd","text":"<ul> <li>            Just call me Sony Walkman, 'cause I'm a CD player          </li> </ul>"},{"location":"topics/#tag:claude","title":"claude","text":"<ul> <li>            Project Overview: Portfolio Site          </li> <li>            \ud83d\udcc2 ChatGPT and Claude Chat Capture Bookmarklets          </li> </ul>"},{"location":"topics/#tag:creativity","title":"creativity","text":"<ul> <li>            In Defense of Handwriting          </li> </ul>"},{"location":"topics/#tag:documentation","title":"documentation","text":"<ul> <li>            Just call me Sony Walkman, 'cause I'm a CD player          </li> </ul>"},{"location":"topics/#tag:feedback","title":"feedback","text":"<ul> <li>            Working with me          </li> </ul>"},{"location":"topics/#tag:github","title":"github","text":"<ul> <li>            Just call me Sony Walkman, 'cause I'm a CD player          </li> <li>            Project Overview: Portfolio Site          </li> </ul>"},{"location":"topics/#tag:gitlab","title":"gitlab","text":"<ul> <li>            Just call me Sony Walkman, 'cause I'm a CD player          </li> <li>            Project Overview: Portfolio Site          </li> </ul>"},{"location":"topics/#tag:handwriting","title":"handwriting","text":"<ul> <li>            In Defense of Handwriting          </li> </ul>"},{"location":"topics/#tag:javascript","title":"javascript","text":"<ul> <li>            \ud83d\udcc2 ChatGPT and Claude Chat Capture Bookmarklets          </li> </ul>"},{"location":"topics/#tag:km","title":"km","text":"<ul> <li>            How to Doom a Project with One Sentence          </li> <li>            Just call me Sony Walkman, 'cause I'm a CD player          </li> <li>            Strange Loops: Elegant recursion, or KM trap?          </li> </ul>"},{"location":"topics/#tag:llm","title":"llm","text":"<ul> <li>            In Defense of Handwriting          </li> </ul>"},{"location":"topics/#tag:mkdocs","title":"mkdocs","text":"<ul> <li>            Project Overview: Portfolio Site          </li> </ul>"},{"location":"topics/#tag:site","title":"site","text":"<ul> <li>            Changelog          </li> </ul>"},{"location":"topics/#tag:work","title":"work","text":"<ul> <li>            How to Doom a Project with One Sentence          </li> <li>            Project Overview: Portfolio Site          </li> <li>            Strange Loops: Elegant recursion, or KM trap?          </li> <li>            Work          </li> </ul>"},{"location":"topics/#tag:work-life","title":"work-life","text":"<ul> <li>            How to Doom a Project with One Sentence          </li> <li>            Strange Loops: Elegant recursion, or KM trap?          </li> <li>            Working with me          </li> </ul>"},{"location":"topics/#tag:writing","title":"writing","text":"<ul> <li>            In Defense of Handwriting          </li> </ul>"},{"location":"about/working-with-me/","title":"Working with me","text":"<p>It's awfully hard to get a sense of what it's like to work with someone just from a LinkedIn profile. It's probably not much easier via Markdown file, but I'll give it a shot. </p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#what-sort-of-work-do-i-like-to-do","title":"What sort of work do I like to do?","text":"<ul> <li>Technical writing, and other roles where I get to first go research, ask smart people about complex things, and play in a sandbox to get the gist, and then distil those concepts for other people in a way that is beneficial to them. I love digging into new tools, processes, and generally complicated systems and seeing how they tick;  I'm happiest in a role where I can continuously challenge myself to learn new things, while consistently empowering others. (See also: teaching, specifically ESL teaching; English remains the weirdest, hardest, most esoteric system I've ever tackled, and I love it to bits!) <ul> <li>Topics I've engaged with as a tech writer include:<ul> <li>AI (specifically, Natural Language Processing, or NLP - in particular, I recently wrote a paper comparing accuracy and resource consumption metrics across six different models for Named Entity Recognition, or NER, and summarization tasks) </li> <li>Data analytics and visualization (I'm especially fascinated by storytelling with data - Edward Tufte is a personal hero of mine) </li> <li>Cybersecurity (I even got to have a Security+ cert for a few years - it's since lapsed since I moved projects, alas, but I hope to have an excuse to renew it one day, because security is not only critical for literally organization, but utterly fascinating. Shoutout to Darknet Diaries.)</li> </ul> </li> </ul> </li> <li>Knowledge management, because you can write the most majestic documentation in the world, but it won't matter if no one knows where to find it or trusts that it's up to date. Knowledge management is a fascinating blend of disciplines (which means that - hooray! - there's so much to learn); this means that it looks different in every organization, while usually being relegated to a part-time position for one determined person (e.g., me). I want to change that! I've become quite a KM evangelist recently - much like FinOps, security, or documentation (i.e., the writing of such), it's something that every tech team needs even if not every team is specifically \"doing KM\". (And KM is part of all of those disciplines, too!) </li> </ul>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#what-sort-of-relationship-do-i-want-with-my-team","title":"What sort of relationship do I want with my team?","text":"<p>Collaborative, respectful, curious, and fun. I want to work with smart, passionate, warm people who embrace their own and others' quirks, are inquisitive and engaged at work while being respectful of each others' time, and have fascinating hobbies and exceptional Slackmoji game. </p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#where-do-i-want-to-work","title":"Where do I want to work?","text":"<p>For the most part, I prefer to work remotely, from home or wherever I choose to travel. I want the option to relocate seasonally, take time to explore, and spend extended time in different places. </p> <p>That said, I have experienced the isolation and lack of connection with coworkers that comes with no in-person time at all. I have had many teammates who I've just known as black boxes in Teams calls, and no more. It's no way to collaborate, and I believe that in-person connections are difficult if not impossible to replicate totally online. However, little frustrates me more than hamfisted RTO mandates that result in people commuting to offices just to sit on Zoom calls the same way they would at home. </p> <p>Rather, I'd love to work with a team that dedicates specific events to team-building, unconnected to a particular project - that is, setting aside time for everyone to come together, chat, mingle, get to know each other as people, and establish the relationships and trust to support the work they do remotely the rest of the time. High trust, high connection, high quality time. </p> <p>It's the dream, anyway. </p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#dont-just-take-my-word-for-it","title":"Don't just take my word for it...","text":"<p>I have had the immense pleasure of working with some truly exceptional people over the years, and am even luckier that they liked working with me, too. Here's some of what they had to say:</p> <p>\"Ryan consistently delivers high quality products, on time and above expectations. She has a reputation for being prepared for anything, willing to jump in at moment's notice, and being able to adapt to changing situations with grace and a sense of calm that is reassuring to others. It is abundantly clear that Ryan is extremely knowledgable about change management processes, working with technical clients and teams, and implementing process improvement plans/strategies... Her attention to detail, ability to rapidly leverage her experience for new products, and technical expertise has helped our team build out a substantial repository of internal SOPs and best practices. In large part due to Ryan's efforts, these documents are easy to understand, comprehensive, accessible to technical and non-technical stakeholders, and regularly updated.</p> <p>...Overall, Ryan continuously makes recommendations for how to make things better, strongly executes existing processes, facilitates team discussions, fosters inclusion, and rolls up her sleeves to do outstanding work for our clients, our team, and Booz Allen. I am honored to be working with Ryan and our entire team is very grateful to be working with such a talented individual.\" - Organizational Transformation and Change Consultant, Booz Allen</p> <p>\"Ryan is an invaluable asset to our team, and to Booz Allen overall. She repeatedly goes above and beyond in her role, is always available for questions or assistance, and routinely jumps in to learn new things or assist without being asked. I genuinely appreciate all that she has brought to our project and look forward to working with her every day. Thank you, Ryan, for all that you do!\" - Information Assurance Engineer, Booz Allen</p> <p>\"I cannot say enough about the tremendous value that Ryan brings every day to the Team and to the overall Project. In her position as Release/Change Manager, she plays an invaluable role of driving key client-facing activities. Day after day, Ryan gives all of her work an attention to detail that sets a high standard for her peers, regardless of the number of moving pieces involved. She serves as a steady, centralizing force for the Team to ensure that Client needs and deliveries are met, on-time and to specification. She is not afraid of new challenges, instead decisively and methodically breaking down the issue and properly structuring time and resources to overcome. Her individual contribution and work quality always exceed expectations and translate into an exemplary Firm image to our clients.\" - Release Train Engineer (RTE), Booz Allen</p> <p>\"I have had the pleasure of working with Ryan in a number of different capacities over the last several months, and she never ceases to amaze me with her ability to jump in and contribute to a project from the moment she joins. Ryan has a knack for creating order out of disorder, an innate ability to address areas of ambiguity with structured yet lightweight processes that enable her team to formulate creative solutions from a stable foundation. This knack of hers was most evident to me during Ryan's brief time on a migration effort. We were in the final two months of the project when she joined as our Technical Writer, yet her presence was immediately felt across the board. Whereas our previous Technical Writer had only assisted with the maintenance of two contractual deliverables, Ryan became the team's point person for all migration-related documentation. Internal SOPs, configuration baselines, architecture diagrams, cross-team lunch and learn presentations, targeted client presentations - she produced all of them, all with minimal guidance and all via a combination of independent analysis and interviews with various team members. She was the key driver in our team's knowledge transfer activities with development, PaaS/SaaS, and Production Operations teams, and proved essential in fostering collaboration between all parties involved. All this she did with a smile on her face and a witty remark at the ready. The team was exponentially better for Ryan having joined it, and for that I can give no higher praise.\" RTE, Booz Allen</p> <p>\"This award is to recognize Ryan's passionate service to our team. Ryan consistently goes above and beyond her role as a release manager and is consistently commended by her peers in regards! She consistently is a driving force for continuous improvement, and without her, our area would not shine as brightly.\" DevOps Engineer, Booz Allen</p> <p>\"Ryan has transformed the Change and Release Manager role... She stepped in to this vital role at a time when the project required stability and authority from the position. She got up to speed on the existing processes quickly and immediately began identifying opportunities to improve the value that the position provided to the ProdOps team and our clients. Over the last 9 months she has streamlined the process for request and approval, led the effort to migrate work items from RTC to Jira, bridged the gap between development and operations teams during the migration to GitHub for property management, and assisted with the ramp-up of change and release management for the wider project.\" System Train Engineer (STE), Booz Allen</p> <p>\"Ryan was an excellent team member for our team. Ryan held not only the highest professionalism and courteous attitude, but also maintained the highest standards of competence and delivery. Her role was not defined by the title of Technical Writer, but the immense value she added to the team. She was critical to the team's acceleration of delivery, automation of fundamental tasks, and a thought leader on improvements. I am glad to see her move on to greater opportunity, but in earnest we did not lose just a tech writer but a solid team member.\" Director of Engineering, Booz Allen</p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#strengthsfinder-top-6","title":"StrengthsFinder top 6","text":"<p>For those who like that kind of thing, myself included. As you'll no doubt gather, I love a tidy framework.</p> <p>In order of resonance, highest first:</p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#deliberative","title":"Deliberative","text":"<p>I am careful, vigilant, and do not rush decisions, and I approach most situations with a certain reserve. I take time to scan for risks, read the room and between the lines, and weigh trade-offs and multiple perspectives before speaking. I like async communication because it gives me time to absorb and reflect before answering. </p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#ideation","title":"Ideation","text":"<p>I get a rush from seeing the ways in which things connect. Bonus points if it's elegant ways that seemingly complex and unrelated things connect. If I'm not solving something, I'm probably mapping and documenting it. Signals from noise is my jam.</p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#input","title":"Input","text":"<p>I sometimes refer to myself as a \"resource magpie\". I'm a collector, not (exclusively) of things, but of ideas, content, tools, and contexts, and I love surfacing the right thing at the right time. I tend to quietly build a personal knowledge base wherever I go, and often become my team's go-to person for answers. And yes, I excel at trivia night.</p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#learner","title":"Learner","text":"<p>My curiosity is never turned off, ever. I thrive in environments where I can pick up new skills, systems, or tools and immediately start playing with them, seeing what they do, and putting them to use. For me, the learning journey is the point more so than the destination. Once I've understood how something works, I'm likely to be looking for the next challenge.</p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#focus","title":"Focus","text":"<p>I set courses and follow through with clarity. I chart and make consistent progress on complex tasks, not by sprinting, but by showing up every day and taking step after step that lead me to my goal. (Tasks I've accomplished in this way: moving across the country during Covid, training for a half-marathon, spearheading a knowledge base modernization effort, designing and implementing a five-month NLP model evaluation project...more to come on these!). </p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#harmony","title":"Harmony","text":"<p>I try to find the common ground. I'm good at sensing roadblocks and finding paths through them, especially in cross-functional work where clarity and cohesion are everything. I like collaboration that feels frictionless and productive, and I'll quietly cultivate cooperation when needed.</p>","tags":["about-me","work-life","feedback"]},{"location":"about/working-with-me/#extracurriculars","title":"Extracurriculars","text":"<ul> <li> <p>Live music. I'm down for almost anything, but some highlights recently have been King Gizzard and the Lizard Wizard<sup>1</sup>, Ween, Khruangbin, Pretty Lights, Doom Flamingo, Sound Tribe Sector 9, and Deltron 3030. </p> </li> <li> <p>The written word. I'm a voracious reader. Big genres for me include sci-fi (recent favorites include Murderbot and Terra Ignota<sup>1</sup>), fantasy, mythology and epic poetry, history, particularly 20th century (it's not Tony Judt's fault I haven't finished Postwar<sup>1</sup>, but in fact a testament to his writing that I keep trying), philsophy, etc. I usually have a few books cooking at once. </p> </li> <li> <p>Hiking, camping, and the great outdoors in general. I'm so fortunate to live in a gorgeous part of the world with natural beauty aplenty, so am often out hiking or backpacking in the warmer months. Recent favorites include Five Mile Island (WA), Hoh Rainforest (WA), and Quandary Peak (CO).</p> </li> <li> <p>Fun Committee. I'm also very fortunate to live in a town with a lot of cool new friends, and I delight in coming up with fun events. Recent activities include Soup-er Cozy Winter Solstice Party (potluck soup party, everyone wears sweatpants), Second Saturday Brunch Spectacular (monthly potluck brunch), and Picnic Society (recurring event where anyone is free to suggest an outing that somehow involves a picnic). Events in the hopper include Champion's League Invitational (wear whatever makes you feel like a champion; admission price is one good deed, to be shared and celebrated with the group. I just need to find medals and/or trophies to hand out for this one.)</p> </li> <li> <p>Sewing, thrifting, and other sartorial adventures. I've always carried a small fashion flame for Claudia Kishi, and enjoy hunting for (or creating) new items to spice up my wardrobe. </p> </li> <li> <p>RPGs of many flavors. I love D&amp;D (alas, Scheduling is the biggest, baddest boss of all, else I'd be playing nigh-constantly), and single-player RPGs like Skyrim, Oblivion, Fallout, Disco Elysium<sup>1</sup>, etc. </p> </li> <li> <p>Unapologetic consumption of trash media. I'm a recent and enthusiastic convert to the Bravo-verse. I'm almost all the way through legacy RHONY<sup>1</sup> and have been chipping away at Beverly Hills, Potomac, Atlanta, and SLC. Love Hotel had no right to be as good as it is, and Love Island is absolutely insane in the best way. What's your favorite tag line?</p> </li> </ul> <ol> <li> <p>If you're a fan of any of these, we're probably going to be instant friends. If you know, you know.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>","tags":["about-me","work-life","feedback"]},{"location":"blog/","title":"Blog","text":"<p>Thoughts on writing, knowledge management, tech, AI, work/life, and whatever other topics spring to mind. Always written 100% by me, with all the quirks and foibles that entails.</p>"},{"location":"blog/2025/07/10/in-defense-of-handwriting/","title":"In Defense of Handwriting","text":"<p>As a technical writer (and general tech dabbler and person-of-the-new-millenium), I do a lot of typing. There's a lot, a lot, to recommend typing and even voice capture, and they indisputably have their benefits - speed, neatness, ease of editing, compatibility with other invaluable applications... it's hard to even imagine a time before Track Changes and SharePoint and the like made it seamless to share what you're working on with others. (The auto-save feature alone... as a millenial, I unfortunately have access to the collective consciousness of the horror where the power goes out and you realize you haven't hit Save on your biology term paper since 3:00 and it's almost midnight and due tomorrow...!). </p> <p>I've also recently typed a lot into LLM windows for ideating, brainstorming, and so on. I've experimented with AI for, among other things, project and trip planning, recipe tweaking, and even some creative writing (with admittedly mixed results). It has its uses, for sure, and I've been enjoying playing with it to discover my own groove. I certainly don't think it's going anywhere, at any rate.</p> <p>All of that said, I've also been doing more handwriting lately, and actually turning away from typing and GPT for certain things. I'm still feeling it out, but my \"handwriting preferred\" modes tend to fall into two general flavors:</p> <ul> <li> <p>When I need to memorize or \"bake in\" content. I've prepared for a lot of tests and exams in my time, and have tried a lot of different tools for studying and reviewing material. In short, although LLMs are incredible tutors, they can't actually learn the material for me. It's unfortunately very easy to move a lot of words around on a screen without actually internalizing the content. To actually memorize or get concepts baked into my brain, to this day, nothing has worked better for me than writing study notes out by hand, and writing flash cards by hand to review. I'm also a big believer in the aesthetics of study, and there's something about having just the right pen (extra-fine point rollerball, please), a cute notebook, and bright, cheerful highlighters to help solidify a concept. Once I've got a grasp on the material, then it's time to open up ChatGPT and ask it to quiz me. </p> </li> <li> <p>Related, when I need to process something. Journaling, venting, even to-do lists - I've experimented with typing these, and have justified it on the grounds of \"if I just write it in a random notebook, how will I be able to find it later?\" But this assumes that I even want to find anything later, which in my case I've come to realize is a flawed assumption. I've got piles of old journals in a box in my office which I haven't opened once, and honestly recoil at the thought of re-reading. More to the point, journaling, to me, isn't an exercise I do for posterity; it's a cobweb-clearing activity, a way to get messy, raw things out of my brain so I can go about the rest of my day (shout out to Julia Cameron!). In that respect, posterity is pressure, and the ease of editing typed documents actually works against me. I find myself self-editing, questioning, doubting, and not writing. </p> <ul> <li>This also goes for early stages of creative writing as well - LLMs, for example, are fun for ideation and riffing, but (for me, anyway) fall short of getting actual (me-sounding) words on the page. I've experimented with describing a scene in detail and having ChatGPT produce a first draft, for example, thinking that it would help me get over \"the terror of the blank page\", but so far it's caused more headaches than it's mitigated - I end up frustrated that it sounds so wrong and get bogged down in trying to fix something that I didn't even write in the first place. So: messy first drafts when I'm just trying to get something, anything, on paper are still hand-written, and transcribed into type later when it's time to make more sense/edit.</li> </ul> </li> </ul> <p>The common factors between these modes seem to be that the writing is in some way ethereal or disposable (it's only for me; I don't intend to return to it once complete; I don't need to search it later). Content that I plan to share with others, that I plan to return to or refer to later, or that I want to save for posterity for some other reason, gets typed. </p> <p>As more and more people experiment with AI tools for content creation, and learn their own personal approaches and best practices for learning and knowledge management, I suspect there will be a revival or rediscovery of the benefits of writing by hand. One can hope, anyway - it's one of those small pleasures, after all, and we could all surely use more of those. I haven't found a good substitute for the scritch of pen, the smell of good paper, etc., nor for the singular satisfaction of looking up and seeing an entire page filled top to bottom with your own handwriting. (Even if no one else can read it, as my friends remind me about my penmanship. Maybe especially if.) </p>","tags":["ai","writing","handwriting","creativity","llm"]},{"location":"blog/2025/07/12/just-call-me-sony-walkman-cause-im-a-cd-player/","title":"Just call me Sony Walkman, 'cause I'm a CD player","text":"<p>insert excited squeals</p> <p>BLUF: I got my very own CD pipeline going with GitLab! Hot dog! Not bad for a sweatpants Saturday. </p> <p>Background: CI/CD stands for \"Continuous Integration/Continuous Delivery\", and it's a widely-used practice in software development which enables teams to automate different stages of the release lifecycle (for example, building, testing, validation, and deployment to different environments). Automation is fantastic because it ensures that a baseline of steps are applied the same way each time, thus eliminating both the time it would take to do everything manually, as well as the potential for slip-ups or deviation from standard. In other words, it helps teams deploy their code quickly, cleanly, and reliably.</p> <p>Details: For my site specifically, my \"before\" update workflow looked like this:</p> <ol> <li>Make updates (e.g., write a blog post) in Cursor.</li> <li>Save the changes.</li> <li>Commit and push the changes to GitLab, where my source code is tracked.</li> <li>Build the MkDocs site manually.</li> <li>Copy the /site folder to another directory which pushes to my GitHub Pages repo.</li> <li>Commit and push the /site file changes to GitHub, which actually displays the changes.</li> </ol> <p>Friends, no one has time for all this, and the chances were extremely high that I would simply forget to actually push the changes to GitHub at all. (One of the things I really like about MkDocs is that you can preview your changes as you're making them, but this also lends me to believe that those changes are actually live when they're not!) Now, my workflow looks like this:</p> <ol> <li>Make updates (e.g., write a blog post) in Cursor.</li> <li>Save the changes.</li> <li>Commit and push the changes to GitLab, where my source code is tracked. </li> </ol> <p>That's it! GitLab automatically pushes the changes to GitHub Pages for me. </p> <p>Now, a caveat at this point is that whenever I commit changes to source (i.e., GitLab), they will go live immediately on GitHub. I don't necessarily want that in the long term (I'll likely look at implementing releases soon, to be able to better batch updates), but for right now, it's nice to have the deployment streamlined a bit. It's just nice to be back in the CLI saddle again.</p>","tags":["cicd","documentation","km","gitlab","github"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/","title":"Strange Loops: Elegant recursion, or KM trap?","text":"<p>Douglas Hofstadter coined the phrase \"strange loop\" to refer to a system in which you move through different layers of abstraction before returning to where you started - but somehow different, or with a twist. For example, Escher's Ascending and Descending features staircases that loop and fold back impossibly on each other in recursive space. </p> <p>Or, for example, this site - where I'm documenting my process of building the site itself. In other words, blogging about building the blog on which I'm blogging, thus building the blog on which I'm blogging about building... I think you get it. And honestly, it can be a bit of a struggle.</p> <p>The struggle isn't in the writing itself, but more in breaking out of the KM loop which can quickly become an elegant, seductive, recursive dead end. I think it's a common pitfall for knowledge work - that is, getting so far in the weeds on organizing, mapping, planning, even aesthetics, that one never actually gets around to, y'know, the thing you were actually supposed to be doing. </p> <p>This goes triple for personal projects, which suffer from both not having an externally-imposed deadline, and also having personal stakes - the carrot of feeling productive (while not actually producing) matched with the stick of \"what if it's not good enough\" is a combination which can be fatal to actual output.</p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#km-struggle-loops-i-have-known-and-loved","title":"KM struggle loops I have known and loved","text":"","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#km-as-performance","title":"KM as performance","text":"<p>(My specialty, unfortunately.)</p> <ol> <li>Jot some notes down to draft or conceptualize something.</li> <li>Realize that you need a system to organize the notes you wrote to capture the thing you thought. </li> <li>Realize that the system is imperfect.</li> <li>Refactor the system to organize the notes better, and document what you refactored.</li> <li>Repeat steps 2-4 for the documentation of the notes on the refactor of the system you designed to organize the notes about the conceptualization of the original thing you were going to do, ahhhhhh</li> <li>Never get around to actually doing the thing you were jotting notes about in step 1. </li> </ol>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#tool-selection-as-proxies-for-clarity","title":"Tool selection as proxies for clarity","text":"<p>Another greatest hit: get stuck researching just the right tool (or plugin, or extension, or what have you) for days on end until you forget what you were going to use it for and give up on everything entirely. </p> <p>See also: \"this day planner is the one, I really mean it this time\". (I know it's a trap. I'm still gonna buy it. I'm a sucker for a fresh notebook.) </p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#refinement-retrieval","title":"Refinement &gt; retrieval","text":"<p>Spend so much time optimizing the workflow and refining the content that you make yourself heartily sick of it and never even look at it again, thus defeating the original purpose of either imparting or gleaning insight. A related terror is, getting so wrapped up in endless edits and polishes that you never even publish anything. The refinement loop becomes more comfortable (because it's still \"productive\"-feeling!) than actually putting things into production.</p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#bonus-km-for-the-future-not-the-present","title":"Bonus: KM for the future, not the present","text":"<p>Spend way too much time trying to over-engineer your system to handle edge cases and solve problems you haven't even encountered yet.</p> <p>I actually ran into this earlier today when I was trying to impose tag categories on my topics page. I spent far too long researching plugin configurations and troubleshooting and looking up how to implement nested tags, instead of thinking harder about whether I even needed tag categories in the first place. Spoiler: I don't! At least, not right now. I have, like, seven pages on this whole site. </p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#breaking-the-doom-loop","title":"Breaking the doom-loop","text":"<p>I'm still working on recognizing and breaking these loops, because you can't just never organize or edit anything. But I do have a few strategies I'm trying out for my personal projects, at least:</p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#develop-a-preference-for-production-over-planning","title":"Develop a preference for production over planning.","text":"<p>Actual production, i.e., pushing actual content updates to my actual GitHub Page. Reorganization is officially lower on the priority list (not off!!! just lower).</p> <p>Related,</p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#embrace-messy-velocity","title":"Embrace messy velocity.","text":"<p>Let things be \"good enough\", including findability. If it's important enough, and hard enough to find, I can always come back later. </p> <p>In other words, iterate only when friction demands. </p> <p>(This also demands that one understands what \"friction\" actually is, which encourages good understanding of user experience, = win win.)</p> <p>In summary, as my father always says, </p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/16/strange-loops-elegant-recursion-or-km-trap/#begin-with-the-end-in-mind","title":"Begin with the end in mind","text":"<p>After all, the point isn't to have a set of perfected blog posts I never share with anyone, is it? </p>","tags":["work-life","work","km"]},{"location":"blog/2025/07/23/how-to-doom-a-project-with-one-sentence/","title":"How to Doom a Project with One Sentence","text":"<p>I was once invited last-minute to a meeting that was supposed to be a kind of kick-off or brainstorm session for a mysterious new initiative. Judging from the pre-meeting chatter as folks filed into the room, I wasn't the only person lacking context. </p> <p>The meeting organizer came in and began outlining the project goals. Someone raised their hand and asked, reasonably, \"What's the priority level of this project, given other initiatives underway?\". </p> <p>I departed that organization shortly after this meeting (for unrelated reasons!), but I feel confident predicting the ultimate fate of that project: nothing ever came of it and it fizzled in development, if it made it that far (or, as Calvin put it, \"(that) train of thought is still boarding at the station\").</p> <p>Whence my confidence? Because in response to \"what's the priority level of this project\", the answer was, verbatim, \"it's somewhere in the top ten of our number two priority list\". </p> <p>In other words, doomed.</p> <p>To be clear, this is not to disparage the original project idea (I thought it was a good idea, and agreed it was sorely needed), nor doubt the sincerity of the organizer, or the good intentions of the other people in the room (it was a mercurial time for the team and I'm sure the priority lists were indeed in flux); rather, it's to highlight that in spite of those good intentions, the high quality of the idea, the good-will and desire from the team to get it done...it was likely doomed to fail before it started, because it simply wasn't a set priority. Or rather, everyone agreed that it should be done, but either couldn't or wouldn't allocate the resources and time to get it done, at least not at the expense of other ongoing concerns.</p>","tags":["work","work-life","km"]},{"location":"blog/2025/07/23/how-to-doom-a-project-with-one-sentence/#this-is-how-knowledge-management-dies","title":"This is how knowledge management dies","text":"<p>Lots of KM efforts fall into this trap. I think that this inability to \"put it somewhere in the top ten of the number one priority list\" can arise for several reasons: one of the biggest culprits I've personally observed is when a team expands really quickly, KM doesn't scale accordingly, and a total monster is created. </p> <p>It might look like this:</p> <ol> <li>Small, tight-knit, fast-moving team works in close coordination on a project that is ambitious, but early enough in its conception that it's feasible for just a few SMEs to be working on it. Because the project is small and the team is tightly coupled, there's a lot of tacit, institutional knowledge shared informally among the group (hello, Slack threads). It's common for someone to be the \"go-to\" person for particular tasks or questions, and the small group of SMEs tend to handle issues or inquiries personally on the fly. </li> <li>The team and the project both expand, fast, and the original SMEs are either promoted into lead positions or otherwise abstracted away from the hands-on work they were originally doing. Lots of new hires hit the team and begin to get tasks delegated to them that the original SMEs were doing (or, worse, the original SMEs keep firefighting because they're too busy to properly hand off tasks). The people with the most context are now too busy to document what they know.</li> <li>The first wave of new hires either shadow SMEs to learn how to perform tasks, and may document their findings, or just do their best to improvise new processes for new tasks as they come up. The first wave of new hires become the new SMEs for the product, another wave of new hires join the team, and the process repeats. Everyone is so busy trying to either onboard, learn the product, train others, or stand up new product lines or teams, that it leaves little time for knowledge capture. There is little to no set standard/template or standard process for writing, publishing, or updating documentation, which leads to a chilling effect for even people who have the time and inclination to document things.</li> <li>A year later, the knowledge base/SharePoint site/Confluence site/what have you is an unholy stew of outdated articles, orphaned attachments, broken links, and siloed actually-still-useful artifacts that only a few people know how to find. No one bothers with the sidebar or homepage, but rather Slacks each other the one or two links that have relevant information on them, often with disclaimers like \"Step 5 says to (x), but ignore that. You actually have to...\"</li> <li>The knowledge/documentation debt becomes unsustainable, and it's determined that something needs to be done to, uh, document stuff - but the original issues of \"everyone is so busy\" not only haven't gone away, they may have gotten worse. In addition, lots of the articles/documentation that's marginally useful was written by people who have since left the team, processes have fractured, Humpty Dumpty is in the arms of an angel, and who can afford all the kings horse's and all the king's men?</li> </ol> <p>At this point, even strong teams can struggle to dig themselves out.</p> <p>If this sounds familiar, don't despair - you're definitely not alone. I'd even go so far as to say that this is a normal experience for expanding teams, and requires rather remarkable foresight and effort from the outset to forestall. To be honest, I've rarely seen it done well. But my recommendation would be, for those wanting to try: dedicate, empower, and integrate a KM specialist from the very beginning, or as close as possible, to drive knowledge capture and knowledge management culture. </p> <p>Like security or FinOps, knowledge management is above all a distributed issue, but it only works with a clear owner; everyone has a role to play, but it's imperative to have a centralized person or team in place to help set and socialize quality standards, assist team members with questions, and generally be \"the voice\" of knowledge management on a team. </p> <p>In short: if no one does it, no one will do it - and if no priority is set, the priority level is automatically \"zero\". </p>","tags":["work","work-life","km"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/","title":"Things I Read This Week #1: KM Failures, AI-roboros, and the Worst Neologism Ever","text":"<p>I returned to work after a personal leave of absence last week; between that and some other personal stuff going on, I didn't have the spoons to write a post. I also basically tried too hard to have a Good Idea to write about, which put me off blogging entirely for a bit, so I just decided to not.</p> <p></p> <p>This doesn't work though if there's no one inducing panic and it's only me writing for me. Alas.</p> <p>In retrospect, I think that part of the Good Idea failing to materialize is that I was trying to force myself to have clever, useful, marketable things to say specifically in reference to AI, ideally more specifically around generative AI. After all, it's topical, newsworthy, engaging, there's lots going on! </p> <p>In practice, though, I've found myself disengaging a bit from AI, taking a step (further) back from the cutting edge. I seem to have passed through the honeymoon stage of Oberg's culture shock model, and am now on to the \"negotiation\" stage (the equivalent of an expat being irritatedly baffled by things like confusing lines at the post office or being unable to work out a ticket machine, or, say, getting tricked into pouring a completely unpleasant surprise on your cornflakes<sup>1</sup>).  </p> <p>My personal negotiation stage is still unfolding, and I'm sure I'll have more coherent thoughts about it in the not-too-distant future; in the meantime, I want to highlight a few things I read this week that helped flesh this feeling out for me a little:</p>","tags":["KM","AI"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/#why-your-ai-is-only-as-smart-as-your-knowledge-management-the-hidden-foundation-of-effective-ai-implementation-cannonco","title":"Why Your AI is Only as Smart as Your Knowledge Management: The Hidden Foundation of Effective AI Implementation (CannonCo)","text":"<p>As the title suggests, this article claims that, while breathless headlines and frothy demos promise the world, many actual AI implementations not only fail to meet expectations, but fail to even make it into production. (Let's put a pin in that exact statement for a moment - I'll come back to that specific claim shortly, but I have no issues with that general prediction.) The article pinpoints knowledge management as a central, non-negotiable prerequisite that many organizations kinda gloss over before throwing AI at a problem. The result is, at best, delayed timelines for implementation while data is audited, organized, formatted for AI, contextualized, and properly curated and maintained; at worst (I reckon far more commonly), completely untrustworthy and irreplicable results from a black box model trained on data that no one fully understands or can articulate. </p> <p>And even worse than that, it's not a given that the untrustworthy model would even be recognized as such. (I'll have much more to say on this at some point hopefully soon - I recently spent six months on a project evaluating Natural Language Processing models for named entity recognition and summarization tasks, and boy howdy did I learn a lot about how tricky it is to correctly implement and evaluate even seemingly simple tasks, and how fallible evaluation metrics can be. In short, it's very VERY easy and undoubtedly tempting to say \"high accuracy number good\", but the reality is that all you know is that \"high accuracy number high\", not that \"high\" = \"good\" for the task, nor that \"accuracy number\" is the right number to be looking at in the first place.) </p> <p>One wonders how many of the projects currently having AI thrown at them would be sufficiently, if not better, addressed by just implementing the robust KM practices you'd need to have in place anyway to make the AI implementation a success. But KM doesn't have the same cachet as AI does at the moment, and orgs are feeling huge pressure to get in on the AI gold rush before their competitors do, even if the gains are illusory.</p> <p>Which brings me to my next article:</p>","tags":["KM","AI"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/#every-reason-why-i-hate-ai-and-you-should-too-marcus-hutchins-malwaretech","title":"Every Reason Why I Hate AI and You Should, Too (Marcus Hutchins, MalwareTech)","text":"<p>This article by cybersecurity legend Marcus Hutchins is very, very worth reading in full yourself, and I basically agree with everything he wrote here. I personally align with his third category of opinions from \"reasonable\" people he's talked to re: AI, with the perspective of \"the tech has a narrow use case for which [it is] exceedingly valuable, but almost everything else is just hype\". Hutchins was talking here about generative AI specifically, but I'd include other applications as well; referring back to a previous point, it's likely that some if not many use cases currently being addressed by \"sprinkling some AI on it\"<sup>2</sup> could be addressed just as well if not better by more conventional means - better KM, judiciously applied statistics, etc. </p> <p>Hutchins goes on to say a lot of really insightful stuff about the \"big tech AI hedge bet\" on the race to AGI, \"trickle-down hypenomics\", and more about how LLMs specifically will not be the answer to AGI despite receiving a huge amount of the attention (seriously, just go read the article - he lays all of this out much better than I can paraphrase). It's all fascinating, food for thought, and I'll be diving more into these topics soon I'm sure. But I found myself really resonating personally with the section titled \"The Snake is Already Eating Its Own Tail\". </p>","tags":["KM","AI"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/#the-ai-roboros-get-it","title":"The AI-roboros (get it?)<sup>3</sup>","text":"<p>Hutchins describes the issue of \"source cannibalization\" and why it's likely to be a death knell sooner rather than later for LLM development:</p> <p>Right now big tech companies operate in a temporary utopia where they\u2019ve been able to capitalize on mass-scale copyright infringement as a result of the free and open internet, but have not yet started to suffer the consequences of the damage they\u2019re causing to the information ecosystem.</p> <p>LLMs act as a sort of magic funnel where users only see the output, not the incalculable amounts of high-quality human-produced data which had to be input. As such, it\u2019s likely people significantly overestimate how much their work (prompting) contributed to the output they received, and grossly underestimate how much of other peoples\u2019 work was required to make it possible. It\u2019s classic egocentric bias.</p> <p>This kind of bias leads to people ignoring the threat LLMs pose to their own data sources. The problem is further amplified by AI slop (low-quality AI generated content), which floods the internet, degrading the average quality of information. This slop not only makes it harder for humans to find high-quality sources, but harder to train LLMs, since allowing the slop to enter LLMs datasets risks creating a feedback loop which could cause the LLM to undergo model collapse.</p> <p>I don't know about you, reader, but I've already noticed the proliferation of obviously AI-generated content across the web. Hell, I've played with generating some myself (not this site/blog - this is all me, baby!). It's admittedly fun and a cool parlor trick, and it can even be useful to word-vomit into a ChatGPT window and have it re-organize your thoughts into something more coherent. </p> <p>However, for all the glitter and fun, there are some seriously dark implications for the Internet, for data, for individuals, and for society. (I'm not even going to touch the environmental impact here, as that's well beyond my area of expertise, but there's obviously plenty to keep you up at night about there too.) Hutchins speaks above to some of these: the mass-scale copyright infringement and theft required to train these LLMs in the first place; the ongoing threat to the quality of data and chilling effect on new, original, content; the inevitable ebb of LLM training, or at least of training quality, as a result of the degradation across the Internet. </p> <p>Hutchins doesn't speak to this directly, but I've been thinking a lot about AI-generated image quality in particular, and how that's evolved over the last couple years. Just a few years ago (maybe not even? what even is time anymore), it was easy to tell at a glance that an image had been AI-generated; there were certain tells (number of fingers or limbs, a weirdly grainy, over-saturated quality to a lot of images, etc.) and a certain uncanny-valley-ness that was easy to pinpoint if not describe. That \"uncanny valley\" only lasted a few years, though. Nowadays, it's getting harder and harder to tell what's been AI-generated or altered, or not. This Reddit post from two years ago shows the evolution in Midjourney from v1 to v5 and already at that point one could be forgiven for failing to notice at a glance that the v5 image was AI-generated. And that was two years ago! Two years ago is a whole era ago in terms of AI evolution.</p> <p>In terms of text, we're still in the \"uncanny valley\" era where you can \"just tell\" that something has been generated by ChatGPT: the dashes, the \"it's not [x], it's [y]\" phrasing, emoji-fronted checklists, obnoxious calls to action at the end of every paragraph. But we'll surely move past that soon if not already (I haven't tried out GPT5 yet; maybe today's the day!) and I think that will be the true existential threat to the Internet or certain chunks of the Internet (hello Reddit). The unwritten social contract and trust underlying message boards and social media since their inception will be irrevocably broken: if I have no reason to believe that there are any humans left on the Internet (or any way to tell who is human from what is an AI agent), why would I go there to socialize?</p>","tags":["KM","AI"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/#faux-ductivity-llms-as-brain-candy","title":"Faux-ductivity: LLMs as Brain Candy<sup>4</sup>","text":"<p>Hutchins also wrote at length in his article about the threats implicit in LLM use not only on an internet-wide level, but also to the individual using it.</p> <p>Per Hutchins:</p> <p>By allowing people to quickly summarize &amp; manipulate the work of others, LLMs use gives the same feeling of achievement one would get from doing the work themselves, but without any of the heavy lifting...</p> <p>LLMs are somewhat like lossy compression of the entire internet. They boil nuanced topics down into a form that isn\u2019t quite layperson level, but loses a lot of nuance while still evoking a feeling of complete understanding. The part that\u2019s missing is, you don\u2019t know what you don\u2019t know. If you lack an intricate understanding of the task you\u2019re using an LLM for, you have no idea what nuance was lost, or worse, what facts it made up...</p> <p>When people use LLMs, they aren\u2019t just being presented with flimsy surface level understandings of topics. They\u2019re often outsourcing many of their means of reinforcing knowledge to the AI too. And in some cases, their logic and reasoning itself. The more people lean on LLMs, the more likely they are limit their knowledge expansion, undergo skill regression, and weaken their logic and reasoning ability.</p> <p>Basically: LLM usage can not only make you feel like you've understood something when you haven't (even assuming that the summary it gives is factual, which we've already established is not actually a safe assumption!); LLMs can also make you feel like you've accomplished or produced something when you haven't. </p> <p>I've experienced this personally. As I've written about before, LLMs make it very easy, and actually actively encourage you to, produce tons of words about a topic, without actually leaving the chat window to go work on it, or solidify what you've 'discussed'. It's basically that feeling of looking up from a book and realizing you didn't take in the last 3 paragraphs you read, except magnified. </p> <p>In terms of actually producing or doing things, it's so so enticing and convincing to feel like you've accomplished a lot, but when you walk away, it's all just ephemeral words in a box. A GPT will encourage and cheerlead you all the livelong day to build out a 90-day learning plan to study for whatever exam, build a tracker for your new fitness or nutrition plan, whatever, and it'll feel good! But then when you get up from your desk, you'll still have just spent hours sitting at your desk staring at a screen by yourself and you won't actually have produced anything even though it feels like you did. </p> <p>Of course, the LLM doesn't care what you've produced; after all, your engagement with the LLM is the primary measure of success for proprietary LLMs, not whether you actually go do/learn the thing or not. But for you, the person who actually sat down presumably wanting to plan to do something, this is a problem.<sup>5</sup></p>","tags":["KM","AI"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/#the-hypothetical-ai-accelerated-employee","title":"\"The Hypothetical AI-Accelerated Employee\"","text":"<p>Hutchins wraps up his article by addressing \"the hypothetical AI-accelerated employee\":</p> <p>The popular wisdom that\u2019s seen as somewhat of a middle ground between \u201cLLMs are useless plagiarism machines\u201d and \u201cLLMs are going to replace everything ever\u201d is the hypothetical AI-accelerated employee. While not necessarily terrible advice, I feel like the mainstream interpretation is the opposite of what the advice should be.</p> <p>The fact of the matter is, \u201cprompt engineering\u201d or whatever they\u2019re calling it these days, has a skill cap that\u2019s in the floor. Prompting LLMs simply just isn\u2019t a skill, no matter what influencers who definitely weren\u2019t previously claiming Bored Apes are the new Mona Lisa say. If you look at the prompts even the LLM developers themselves are using its things like \u201cplease don\u2019t make stuff up\u201d or \u201cthink extra hard before you answer\u201d.</p> <p>In fact, I\u2019d make a strong argument that what you shouldn\u2019t be doing is \u2018learning\u2019 to do everything with AI. What you should be doing is learning regular skills. Being a domain expert prompting an LLM badly is going to give you infinitely better results than a layperson with a \u2018World\u2019s Best Prompt Engineer\u2019 mug.</p> <p>This aligns with what I've personally heard when I've asked industry experts the exact same thing: the differentiating factor for consultants and other knowledge workers will not be being a great prompt engineer or what have you (although understanding how prompts work and what their limitations are is a great skill to have, it shouldn't be everything). I believe that the differentiating factor will be domain expertise, held by humans. </p> <p>To paraphrase an executive I talked to recently, it's true that clients don't need consultants anymore for 101-level answers to generic technology or business questions, but what they do and will continue to need is help interpreting those answers in the context of their specific circumstances<sup>6</sup>. I think that that domain expertise and interpretation/extrapolation capability is only going to become rarer and more precious considering the slop proliferation and decline in actual productivity mentioned earlier. Hutchins predicts actual, literal mass cognitive decline as a result of widespread LLM use; I guess only time will tell. </p>","tags":["KM","AI"]},{"location":"blog/2025/08/08/things-i-read-this-week-1-km-failures-ai-roboros-and-the-worst-neologism-ever/#the-worst-neologism-possibly-of-all-time","title":"The Worst Neologism Possibly of All Time","text":"<p>The final piece that caught my attention this week in \"AI, maybe not all it's cracked up to be?\" news wasn't actually an article, but rather a LinkedIn post by cybersecurity investigative reporter Brian Krebs that introduced me (unwillingly, nauseatedly) to the term slopsquatting. </p> <p>It's actually a fascinating phenomenon, if thoroughly unsettling in name, implication, and scope, and I don't envy security professionals who will have to figure out how to deal with this. </p> <p>I'm very much not an expert, but I'll try to explain as best as I can. </p> <p>I haven't said much about the explosion of vibe-coding that's underway as we speak, but it's massive; essentially, using LLMs and other AI models to code applications, with all of the issues that we already discussed with LLMs. It's basically now really easy to generate an app that kinda maybe looks like it works on the surface, but without any understanding of what's going on under the hood. (I've dabbled with it, but quickly ran into the problem of the generated code outpacing what I understood about how it worked, and I abandoned my attempts after a few days of feeding error codes back into Cursor and getting increasingly unintelligible results.)  </p> <p>Anyway. An inherent problem with LLMs, and one that is a basic component of their design (so impossible to fully mitigate), is that of hallucination: LLMs are essentially designed to mimic language (or in this case, machine language/code) convincingly based on the language or code they've been trained on. They have no ability to \"understand\" or reason about what they produce. They are therefore prone to \"hallucinating\" or making reference to events that never happened, court cases that never existed, etc. In the case of code, this includes software packages that don't exist, but that sound like others which do actually exist. </p> <p>For example, per the Wikipedia article:</p> <p>In 2023, security researcher Bar Lanyado noted that LLMs hallucinated a package named \"huggingface-cli\".While this name is identical to the command used for the command-line version of HuggingFace Hub, it is not the name of the package. The software is correctly installed with the code pip install -U \"huggingface_hub[cli]\". Lanyado tested the potential for slopsquatting by uploading an empty package under this hallucinated name. In three months, it had received over 30,000 downloads.</p> <p>In other words, the package is called two separate things in two separate contexts: the package is correctly called huggingface_hub[cli] when you want to install it with pip, but when have actually installed the package and want to use it, you call it by huggingface-cli. The LLMs saw the huggingface-cli invocation command and incorrectly assumed that the installation command would use the same name for the package. </p> <p>Under normal circumstances, if you try to use pip install with an incorrect package name, you typically just get an error; up until now, it would be pretty clear when you're intending to install something specific and just typo the name or whatever, since presumably you'd be looking at documentation of some kind or other for the package. In other words, it's much more likely that you'd fail outright, and much less likely that you'd accidentally install something other than what you intended to install. Additionally, you'd presumably be looking at the command line yourself and have some expectation for what the output should look like even if you somehow managed to install the wrong thing, and have the knowhow to uninstall it. </p> <p>But now, with LLMs abstracting away both the documentation (from the source side) and the explicit understanding/instruction (from the user side), there's room for a researcher to, say, create a dummy package that will get installed instead of the correct one next time the LLM hallucinates the same wrong command based on the same faulty assumption from the training data (which unfortunately happens a lot!). It also means that vibe-coding users are less likely to even realize that the package they actually wanted wasn't actually installed, and/or that their application isn't behaving as expected, especially if the malicious package creator did any amount of work to hide their tracks (which would presumably be trivial for a dedicated cybercriminal who also have access to generative AI coding tools!). </p> <p>Again, I have no clue how one would go about defending against or even detecting this problem. Just add it to the 4:00AM brain tape reel, I guess. </p> <p>This is a kind of extension of a conversation I had recently with a friend who's a cyber threat researcher. This friend mentioned that their workplace is heavily encouraging use of AI to generate reports and, well, research threats, but the problem (besides the obvious of essentially requiring experts to train their AI replacements) is that AI is entirely credulous: it has no way to discern when someone is (gasp) lying on the Internet. The AI equivalent of \"yup, this package looks totally legit, it has a GitHub README and everything\", or \"this construction site project can't be a scam, it has a website with stock photos of people in hard hats holding clipboards\" - again, pointing back to the human domain expertise factor of it all.  </p> <p>I don't really have a wrap-up for all this, sorry. It's Friday as I finish this draft I've been working on for days, the sunshine is calling me outside, and it seems fitting that I'd leave off without a ChatGPT-esque call to action. Okay, just one little one: Think about it, won't you? Thank you!.</p> <ol> <li> <p>As the name suggests, acidofilni mleko is milk with acidophilic bacteria added, and quite common in Czech grocery stores stored right next to the non-acidic milk to snare the unwary TESOL student. It's not quite the same as kefir, but similarly quite sour and tangy, which wouldn't be bad if it wasn't for the fact that all I'd wanted was some plain, simple, familiar milk on my cereal dammit \u21a9</p> </li> <li> <p>I heard a PM say this verbatim once and it's lived rent-free in my brain ever since, though probably not for reasons they'd like if they knew.\u00a0\u21a9</p> </li> <li> <p>I wasn't brave enough to title this section \"AI Centipede\".\u00a0\u21a9</p> </li> <li> <p>AKA: LLM&amp;Ms?\u00a0\u21a9</p> </li> <li> <p>If it sounds like I'm telling on myself here a bit, I absolutely am. This blog is in part a reaction to that unpleasant little discovery, a ploy to keep myself honest in a way.\u00a0\u21a9</p> </li> <li> <p>I also really wish I could remember who quipped recently, \"you can't fire Copilot\", by which they meant that organizations are still going to need a human scapegoat. You gotta be able to fire or dismiss someone after the inevitable data breach or AI-driven decision that gets someone killed, and it certainly won't be the exec who wanted to \"sprinkle AI on it\" in the first place over the objections of, say, the security experts.\u00a0\u21a9</p> </li> </ol>","tags":["KM","AI"]},{"location":"work/","title":"Work notes and project miscellany","text":"<p>Welcome to the tinkering zone! Here you'll find writing samples, hands-on notes, and other evidence of my experiments. </p>","tags":["work"]},{"location":"work/#featured-projects","title":"Featured projects","text":"<ul> <li>MkDocs Build Notes:     How I built this site using Markdown, MkDocs, and Material theme, hosted it on GitHub Pages, and set up a Continuous Delivery (CD) pipeline with GitLab. Coming soon: CI/CD pipeline expansion, releases, and navigation upgrades. </li> <li>LLM Chat Capture:     How I created JavaScript bookmarklets to capture ChatGPT and Claude conversations directly in-browser and download them as Markdown files. </li> <li>APIs 101, Episode 1 and **APIs 101, Episode 2:     The first two installments of a soon-to-be series on APIs: what they are, how they work, and examples of how to use them.</li> </ul>","tags":["work"]},{"location":"work/#browse-by-topic","title":"Browse by topic","text":"<p>Stroll on over to the Topics page to find pages tagged by topic.</p>","tags":["work"]},{"location":"work/API101-1/","title":"APIs 101: What is an API, and where would we be without them?","text":"<p>Hi! This is part one of a series introducing (REST) APIs: what they are, what they do, and how to use them. This first part introduces the concept of an API, and provides context for how they help organizations exchange data cleanly, reliably, and securely. Later installments will discuss how APIs are used in practice, and give examples of what can be done with them. </p>","tags":["api"]},{"location":"work/API101-1/#what-is-an-api-anyway","title":"What is an API, anyway?","text":"<p>It's okay, this was all of us at one point </p> <p>Put simply, an Application Programming Interface (API) is a software interface that enables two computer programs to exchange information. There have been APIs of one type or another for as long as there have been networked computers, but these days, most people say \"API\" to refer to a specific type of API called a Representational State Transfer (REST) API. </p> <p>...which is both true, and a statement that is so generic that it doesn't really impart much. It's like saying that Seinfeld was \"an influential sitcom\"; REST APIs (hereafter I'll just refer to them as \"APIs\") are so much a part of the landscape now that it's hard to grasp how much of a game-changer they really were. To better understand what an API is, then, it's helpful to better understand...</p>","tags":["api"]},{"location":"work/API101-1/#life-without-rest-apis","title":"Life Without (REST) APIs","text":"<p>Computers are incredibly useful, powerful machines, but are limited in what they can do in isolation. The secret sauce is in networking - that is, connecting different computers together to handle different pieces of a complex workload. </p> <p>In the wild west of early computing, computers received input using physical media like punch cards, which could only be encoded once and were prone to damage (or, dog forbid, someone dropping a deck that would then need to be resorted into the correct order). Even once computers could talk directly to each other, there was still no standard way to store or share data between systems, so custom programming was often needed to bridge the gap between incompatible formats. This process was, as one might imagine, tedious, error-prone, and difficult if not impossible to scale. </p> <p>To put this in perspective, imagine going to a fast-food restaurant. The process for ordering food is simple: </p> <ol> <li>Look at a menu of available options </li> <li>Walk to a counter and order from the menu (or punch in your order at a touch-screen) </li> <li>Pay</li> <li>Tasty food appears</li> </ol> <p>No matter where you go, the experience is consistent, as well as being mostly hands-off for you, aside from choosing what you want to eat. </p> <p>The food is also the same. If I order a Big Mac and fries in Boston, it will be the same Big Mac experience as if I order in San Diego or Helsinki.</p> <p>Now imagine the same restaurant...but there's no menu, no counter, and no guidance. There are ingredients around, but no recipes to tell you what to do with them. You might piece together something edible, but maybe you didn't know the right proportions for the secret sauce, or the right temperature for the grill. </p> <p>And even if you do figure out a semi-good, not-sad meal, what happens if you go to the same place next time and the walk-in has been rearranged, or ingredients swapped out? You'd have to figure out all over again where everything is, and you still don't know how to make the secret sauce.</p> <p>From the restaurant's perspective, this is also a nightmare: customers wandering around in the kitchen willy-nilly, leaving dirty dishes and spills, wasting or contaminating ingredients... it's no way to run a business.</p> <p>This pre-API chaos is what early inter-computer communication felt like. Everyone had ingredients, but no shared recipe - just lots of sad food and burned fingers. </p>      Your browser does not support the video tag.    The Cornballer comes for us all, at the REST-less restaurant. <p>That\u2019s why (REST) APIs were revolutionary: they gave everyone the same menu, counter, and prep instructions. Suddenly, systems could work together quickly, efficiently, scalably, and without trashing the kitchen.</p> <p>Next time, on API Masterpiece Theater: what does a REST API actually look like? What can I do with it? And did Lassie ever get Timmy out of that well?</p> <p>Stay tuned for the next installment!</p>","tags":["api"]},{"location":"work/API101-2/","title":"APIs 101, pt 2: How to talk to an API: requests, responses, and examples","text":"","tags":["api"]},{"location":"work/API101-2/#whats-an-api-again","title":"What's an API, again?","text":"<p>In the first post of this series, we discussed what a REST API is: an application interface that enables programs to exchange data cleanly, reliably, and securely. </p> <p>This second installment discusses API requests and responses: the bread and butter of how APIs ask for and receive information. In other words, it's how your favorite apps know that it's probably going to rain later, or how a certain meme stock is doing today.</p>","tags":["api"]},{"location":"work/API101-2/#anatomy-of-an-api-request","title":"Anatomy of an API request","text":"<p>To interact with an API and access data, programs send a request that lets the API know which data to retrieve and what to do with it. There are a few basic components to an API request:</p>","tags":["api"]},{"location":"work/API101-2/#endpointurl","title":"Endpoint/URL","text":"<p>The web address you're calling. Just like a mailing address, it routes the request to the correct location. For example, **https://catfact.ninja/fact.</p>","tags":["api"]},{"location":"work/API101-2/#http-method","title":"HTTP method","text":"<p>An HTTP method specifies what you want the API to do with the data. There are four basic methods:</p> <ul> <li>GET: Ask for data; for example, getting the latest stock price or weather prediction (or cat fact!). We'll focus on this method in the rest of our example.</li> <li>POST: Provide new data that you want the API to append to its existing data.</li> <li>PUT: Update existing data.</li> <li>DELETE: Delete data. </li> </ul>","tags":["api"]},{"location":"work/API101-2/#request-header","title":"Request header","text":"<p>The header is like a note attached to the request with extra details; for example, if you need to provide authentication, or need to specify a content type, this information goes in the header.</p>","tags":["api"]},{"location":"work/API101-2/#request-body-optional","title":"Request body (optional)","text":"<p>The goods you are delivering. If you are using a POST or PUT method, for example, the body is where you'd include the data that you want to update or add. GET requests may not have a body.</p>","tags":["api"]},{"location":"work/API101-2/#interpreting-the-response","title":"Interpreting the response","text":"<p>Once the server has received your request, it sends back a response which either makes the update/gives you the data you asked for, or explains why it couldn't fulfill your request. Just like the request, a response has several different components:</p>","tags":["api"]},{"location":"work/API101-2/#status-codes","title":"Status codes","text":"<p>Status codes are numerical codes that explain the status of the request. You're probably familiar with 404 responses (resource not found). There are a wide range of other three-digit numbers that you can get in response to your request, broken down generally into five classes:</p> <ul> <li> <ol> <li>Informational responses (100-199), such as 102 Processing.</li> </ol> </li> <li> <ol> <li>Successful responses (200-299), such as 200 OK or 201 Created. These are the ones you generally want to see.</li> </ol> </li> <li> <ol> <li>Redirection messages (300-399), such as 301 Moved Permanently, which tells you that the URL or endpoint of the server has moved and gives the new endpoint in the response.</li> </ol> </li> <li> <ol> <li>The dreaded Client error responses (400-499), such as 403 Forbidden or 404 Not Found, which indicate that the request was somehow faulty. This may be because you're unauthorized to access certain data, or because the request syntax is malformed. Or because you're a teapot.</li> </ol> </li> <li> <ol> <li>Server error responses (500-599), such as 500 Internal Service Error, which indicate that something has gone wrong on the server/API side. This might be because of a storage issue, unhandled exceptions, or some other server issue.</li> </ol> </li> </ul>","tags":["api"]},{"location":"work/API101-2/#response-header","title":"Response header","text":"<p>Just like the request header, the response header contains metadata about the response, such as the content type.</p>","tags":["api"]},{"location":"work/API101-2/#response-body-optional","title":"Response body (optional)","text":"<p>The body contains the actual data returned by the API (assuming you've used, say, a GET method that requests data). This is usually in JSON or XML format.</p>","tags":["api"]},{"location":"work/API101-2/#demo","title":"Demo","text":"<p>Now that we know what an API request and response looks like, it's time to get our paws on some cat facts. </p> <p>Copy/paste this URL into your web browser: https://catfact.ninja/fact</p> <p>This will return a JSON object with two key/value pairs:</p> <ul> <li>\"fact\": A fact about cats. A cat fact, in fact.</li> <li>\"length\": The length of the cat fact as measured by the number of characters.</li> </ul> <p>Here's an example:</p> <pre><code>{\n  \"fact\": \"Cats make about 100 different sounds. Dogs make only about 10.\",\n  \"length\": 62\n}\n</code></pre> <p>This JSON, then, is the response body we received from the Cat Fact API. If we wished, we could use it to power something like a \"daily cat fact\" tracker. </p> <p>What about the rest of the response? You can look at the response headers in the \"Headers\" tab. Depending on your machine and browser, this may look a bit different, but you can see more details about both the request and response headers, including when the request was sent, the content type, and more. You can also look in your browser's developer console to see your browser's log of the request and response, including the status code and HTTP method (in my case, a 200 (OK) status code from a GET request).</p> <p>Of course, a response body can be much more complex and contain lots more information, but good old Cat Facts gives us a simple foundation for understanding how an API receives and supplies information.</p> <p>In the next post, we\u2019ll crack open the request headers and talk about API keys, tokens, and why some APIs need to know who\u2019s asking before they spill the (itty bitty toe) beans. Stay tuned!</p>","tags":["api"]},{"location":"work/changelog/","title":"Changelog","text":"<p>All notable changes to this site will be documented here.</p>","tags":["changelog","site"]},{"location":"work/changelog/#2025-08-08","title":"[2025-08-08]","text":"","tags":["changelog","site"]},{"location":"work/changelog/#added","title":"Added","text":"<ul> <li>Published new blog post: Things I Read This Week #1: KM Failures, AI-roboros, and the Worst Neologism Ever and fixed typo</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#2025-08-04","title":"[2025-08-04]","text":"","tags":["changelog","site"]},{"location":"work/changelog/#added_1","title":"Added","text":"<ul> <li>added support for Google Analytics</li> <li>removed 'cookie consent' banner as Material does not support cookie consent for Analytics for non-insiders. need more research for other options re: revoking consent</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#2025-07-29","title":"[2025-07-29]","text":"","tags":["changelog","site"]},{"location":"work/changelog/#added_2","title":"Added","text":"<ul> <li>added APIs 101 pt. 2 post</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#fixed","title":"Fixed","text":"<ul> <li>Moved July 23 blog post out of \"draft\" status</li> <li>Edited July 16 post to fix wording</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#2025-07-23","title":"[2025-07-23]","text":"","tags":["changelog","site"]},{"location":"work/changelog/#added_3","title":"Added","text":"<ul> <li>Added 'updates' section to site notes to walk through GitLab pipeline, plugins, and blog updates</li> <li>Added changelog to sidebar for visibility</li> <li>Updated 'about me' page (extracurriculars)</li> <li>Updated site description in mkdocs.yml</li> <li>Added blog post</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Moved changelog.md to 'work' directory and updated links</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#2025-07-16","title":"[2025-07-16]","text":"","tags":["changelog","site"]},{"location":"work/changelog/#added_4","title":"Added","text":"<ul> <li>updated \"tags.md\" to \"topics.md\" </li> <li>updated work/index.md to include chat-capture and API101 pages</li> <li>Added blog post (\"Strange Loops\")</li> <li>updated \"about me\" page and yml file to add footnotes/footnote support</li> <li>updated index.html with links to sub-pages</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Troubleshooted .gitlab-ci.yml deploy stage for CD pipeline to reinstate directory change for mkdocs yml file</li> <li>Removed tags plugin configs for categorized tagging (obsolete)</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#2025-07-15","title":"[2025-07-15]","text":"","tags":["changelog","site"]},{"location":"work/changelog/#added_5","title":"Added","text":"<ul> <li>'build' and 'validate' stages for GitLab CD pipeline, including changelog check</li> <li><code>awesome-pages</code> plugin</li> <li><code>work/index.md</code> landing page</li> <li>Icon support and better search config</li> <li>Initialized changelog</li> </ul>","tags":["changelog","site"]},{"location":"work/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Resolved search.suggest and search.highlight config error</li> <li>Re-froze requirements.txt to include awesome-pages plugin</li> <li>Resolved typo in .gitlab-ci.yml to point to correct changelog location</li> <li>Adjusted pre-script step to install requirements from requirements.txt on Python image</li> </ul>","tags":["changelog","site"]},{"location":"work/chat-capture/","title":"\ud83d\udcc2 ChatGPT and Claude Chat Capture Bookmarklets","text":"","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#background","title":"Background","text":"<p>I do a lot of ideating and brainstorming using ChatGPT and Claude, but while ChatGPT and Claude are both great for knocking ideas around, they're less great when it comes to capturing and returning to ideas later. Sure, there's a searchbar, but if you're anything like me, you've got multiple chat threads open meandering across different topics over time = a nightmare to search by keyword. Then, even if you find what you're looking for, it's still just sitting there in your browser. You can copy and paste text chunks into other documents, but who has time for that? </p> <p>I Googled around a little and found some browser extensions and the like that capture LLM text, but didn't love the idea of installing a new tool made by dog-knows-who or sending my chat data to (another) (more unknown) place. </p> <p>After a bit more research, I decided to create a JavaScript bookmarklet to help me with this - bookmarklets are lightweight, native across browsers, and easy to use right there in the bookmarks bar, plus I'd have the confidence of knowing I created it myself and it's therefore doing only exactly what I want it to do.</p>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#do-it-yourself","title":"Do it yourself","text":"<p>The following tutorial shows you how to:</p> <ul> <li>Create a JavaScript bookmarklet that captures full ChatGPT conversations, including both user questions and LLM responses</li> <li>Formats the export in clean, human-readable Markdown for maximum portability, compatibility, and future-proofing</li> <li>Automatically generates a unique filename with timestamp (to avoid overwrites)</li> </ul> <p>Use this bookmarklet for AI note-taking, project tracking, etc., from your browser where you're already working. </p>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#tools-youll-need","title":"Tools you'll need","text":"<ul> <li>A web browser (I built mine in Firefox).</li> <li>Access to an LLM web app (I used ChatGPT).</li> <li>A Markdown-friendly note-taking app (I like Obsidian).</li> </ul>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#walkthrough","title":"Walkthrough","text":"<p>To create a bookmarklet to save LLM chats:</p> <p>*Note: The following instructions assume you are using Firefox to capture ChatGPT content</p>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#1-open-your-bookmarks-manager","title":"1. Open your bookmarks manager","text":"<ul> <li>Select the hamburger (three-lines) icon in the top-right corner, then Bookmarks &gt; Manage Bookmarks..., or press Cmd + Option + B (Mac) / Ctrl + Shift + O (Windows). <ul> <li>The Manage Bookmarks pane will open.</li> </ul> </li> <li>From the sidebar, right-click Bookmarks Toolbar, then select Add bookmark.... <ul> <li>The Add Bookmark pane will open.</li> </ul> </li> </ul>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#2-add-the-bookmarklet-code","title":"2. Add the bookmarklet code.","text":"<ul> <li> <p>Fill out the fields to create the bookmarklet:</p> <ul> <li>Name: Name the bookmarklet something like \"ChatGPT to MD\". This will be the name displayed in the bookmark bar.</li> <li>URL: Paste this single-line JavaScript:</li> </ul> <p><code>javascript javascript:(function(){let chats=document.querySelectorAll('[class*=\"group\"]');if(chats.length===0){alert(\"No messages found! Try scrolling up.\");return;}let markdownText=Array.from(chats).map(chat=&gt;{let user=chat.querySelector('[class*=\"whitespace-pre-wrap\"]');let bot=chat.querySelector('[class*=\"markdown\"]');let userText=user?`**You:**\\n${user.innerText.trim()}`:\"\";let botText=bot?`**ChatGPT:**\\n${bot.innerText.trim()}`:\"\";return[userText,botText].filter(Boolean).join(\"\\n\\n\");}).join(\"\\n\\n---\\n\\n\");let now=new Date();let formattedTimestamp=now.toISOString().replace(/[:.]/g,\"-\").slice(0,19);let filename=`ChatGPT-${formattedTimestamp}.md`;let blob=new Blob([markdownText],{type:'text/markdown'});let a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download=filename;document.body.appendChild(a);a.click();document.body.removeChild(a);})();</code></p> <ul> <li>Note: Make sure the entire code is on one line with no breaks!</li> </ul> </li> <li> <p>Select Save, then close the Bookmarks pane. </p> <ul> <li>The new bookmarklet will appear in your Bookmarks toolbar. </li> </ul> </li> </ul>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#3-how-to-use-it","title":"3. How to use it","text":"<ul> <li>Open a conversation that you'd like to save in the ChatGPT web app.</li> <li>Click the ChatGPT to MD bookmarklet in your Bookmarks toolbar.</li> <li>A .md file containing your chat and marked with the current date and time will be saved in your default Downloads folder.</li> <li>Move the file into your Obsidian vault (or wherever you store notes), and you are done!</li> </ul>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#demo","title":"Demo","text":"<p>I was so happy with how it came out, I even made a sparkly little demo in Canva to illustrate capturing a chat about the Roman Empire and converting it to Markdown with one click. </p> <p>Behold!:</p>      Your browser does not support the video tag.","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/chat-capture/#what-next","title":"What next?","text":"<p>As I mentioned at the top of this post, the overall goal of this exercise is to be able to capture and return to ideas later. This bookmarklet is just the first step of that process. I next want to create a centralized knowledge base which includes both chat logs as well as other manual notes and documentation (maybe saved bookmarks, for example?) that would be the back end for a RAG pipeline feeding a local LLM. The ultimate goal of that project being to create a completely localized personal chatbot and knowledge base.</p> <p>More to come there, hopefully soon!</p>","tags":["chatgpt","javascript","ai","claude"]},{"location":"work/this-site/","title":"Project Overview: Portfolio Site","text":"<p>I created a writing portfolio project (this page!) using a docs-as-code approach. My goal was two-fold: to establish an online presence, and to get more hands-on experience with docuuentation engineering tools like GitLab, MkDocs, and the like.</p>","tags":["work","mkdocs","gitlab","chatgpt","claude","github","bash"]},{"location":"work/this-site/#technologies-tools-used","title":"Technologies &amp; Tools Used","text":"<ul> <li>Generative AI (Claude and ChatGPT): Ideating, debugging, debugging rant receptacle </li> <li>Cursor.ai: Development and CLI</li> <li>MkDocs with Material theme: Documentation framework for creating the site<ul> <li>MkDocs plugins:<ul> <li>search - To enable search!</li> <li>tags - To enable TAGS!</li> <li>blog - To create the blog</li> <li>git-revision-date-localized - To auto-generate \"created\" and \"last revised\" timestamps on each page</li> </ul> </li> </ul> </li> <li>GitLab: Primary repository for version control, and (soon) CI/CD workflow for publishing</li> <li>GitHub Pages: Deployment platform for the live documentation site</li> <li>Virtual Environment: For Python dependency management</li> <li>Bash/PowerShell: Created aliases for streamlining the workflow</li> </ul>","tags":["work","mkdocs","gitlab","chatgpt","claude","github","bash"]},{"location":"work/this-site/#updates","title":"Updates","text":"<p>I created the first version of this site using Cursor to create Markdown files and MkDocs to serve the static site. I used GitLab for version control, and GitHub Pages for hosting the site itself. </p> <p>At first, I was pushing updates to GitLab, then building the site locally and manually copying the updated site to a separate GitHub Pages directory and pushing it from there as well. I recently implemented Continuous Delivery (CD) to automate the site build and GitHub Pages push, and have also incorporated pre-deployment quality checks to ensure that no links are broken, that the pages all build properly, and that the changelog has been updated. </p> <p>In terms of the site itself, I started with a basic Material-themed site, and later expanded to include a blog. I've also added plugins for better search, navigation, tagging, and automated timestamping.</p> <p>Next, I'll look at leveraging releases in Git to better package and track updates, as well as auto-generating changelog entries from commit messages to streamline that part of the process. </p> <p>Interested in the raw magic? Check out the changelog!</p>","tags":["work","mkdocs","gitlab","chatgpt","claude","github","bash"]},{"location":"blog/archive/2025/","title":"2025","text":""}]}